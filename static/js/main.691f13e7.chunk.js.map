{"version":3,"sources":["components/Message.js","components/Skittle.js","components/SkittlesContainer.js","components/ColorContainer.js","App.js","serviceWorker.js","index.js"],"names":["props","type","onChange","skittleCount","useState","colorArray","setColorArray","curr","setCurr","shouldChange","setShouldChange","useEffect","scheme","ColorScheme","from_hue","variation","color","colors","callback","delay","savedCallback","React","useRef","current","id","setInterval","clearInterval","useInterval","end","length","className","style","backgroundColor","count","setSkittleCount","skittles","i","push","Skittle","createSkittles","setCount","Message","event","console","log","target","value","SkittlesContainer","App","ColorContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6PAEe,WAAAA,GACX,OACI,8BACI,2EAEI,2BAAOC,KAAK,SAASC,SAAUF,EAAMG,kB,gBCctC,aAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACVC,EADU,KACEC,EADF,OAEKF,mBAAS,GAFd,mBAEZG,EAFY,KAENC,EAFM,OAGuBJ,oBAAS,GAHhC,mBAGVK,EAHU,KAGIC,EAHJ,KAwBjB,OAnBAC,qBAAU,WACN,IAAIC,EAAS,IAAIC,IACjBD,EAAOE,SAAS,IAAIF,OAAO,YAAYG,UAAU,UAEjD,IAAIC,EAAQJ,EAAOK,SACnBX,EAAcU,GACdN,GAAgB,KAEjBD,GA/Ba,SAACS,EAAUC,GAC3B,IAAMC,EAAgBC,IAAMC,SAE5BD,IAAMV,WAAU,WACdS,EAAcG,QAAUL,IACvB,CAACA,IAEJG,IAAMV,WAAU,WAId,GAAc,OAAVQ,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IAkBJQ,EAAY,WACR,IAAMC,EAAMvB,EAAWwB,OAAS,EAE5BrB,EADDD,IAASqB,EACArB,IAEA,KAEb,KAGC,yBAAKuB,UAAU,qBACX,yBAAKA,UAAU,UAAUC,MAAO,CAACC,gBAAgB,IAAD,OAAM3B,EAAWE,SC5C9D,cAAc,IAAZ0B,EAAW,EAAXA,MAAW,EACgB7B,mBAAS,GADzB,mBACjBD,EADiB,KACH+B,EADG,KAExBvB,qBAAU,WACNuB,EAAgBD,KAClB,CAACA,IAUH,OACI,yBAAKH,UAAU,sBATI,WAEnB,IADA,IAAMK,EAAW,GACTC,EAAI,EAAGA,EAAIjC,EAAciC,IAC7BD,EAASE,KAAK,kBAACC,EAAD,OAElB,OAAOH,EAKFI,KCfE,aAAO,IAAD,EACSnC,mBAAS,GADlB,mBACV6B,EADU,KACHO,EADG,KASjB,OACI,6BACI,kBAACC,EAAD,CAAStC,aARI,SAAAuC,GACjBC,QAAQC,IAAR,oBAAyBF,EAAMG,OAAOC,MAAtC,eACAN,EAASE,EAAMG,OAAOC,UAOlB,kBAACC,EAAD,CAAmBd,MAAOA,MCJvBe,MARf,WACE,OACE,yBAAKlB,UAAU,kBACb,kBAACmB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.691f13e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default props => {\r\n    return(\r\n        <form>\r\n            <label>\r\n                How many skittles would you like to make?\r\n                <input type=\"number\" onChange={props.skittleCount} />\r\n            </label>\r\n        </form>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport ColorScheme from 'color-scheme';\r\n\r\nconst useInterval = (callback, delay) => {\r\n    const savedCallback = React.useRef();\r\n  \r\n    React.useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    React.useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  };\r\n\r\nexport default () => {\r\n    const [colorArray, setColorArray] = useState([]);\r\n    let [curr, setCurr] = useState(0);\r\n    const [shouldChange, setShouldChange] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let scheme = new ColorScheme;\r\n        scheme.from_hue(21).scheme('contrast').variation('pastel');\r\n\r\n        let color = scheme.colors();\r\n        setColorArray(color);\r\n        setShouldChange(false);\r\n\r\n    }, shouldChange);\r\n    \r\n    useInterval(() => {\r\n        const end = colorArray.length - 1;\r\n        if(curr !== end) {\r\n            setCurr(curr++);\r\n        } else {\r\n            setCurr(0);\r\n        }\r\n    }, 500)\r\n\r\n    return(\r\n        <div className=\"skittle_container\">\r\n            <div className=\"skittle\" style={{backgroundColor: `#${colorArray[curr]}`}}></div>\r\n            \r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport Skittle from './Skittle';\r\n\r\nexport default ({count}) => {\r\n    const [skittleCount, setSkittleCount] = useState(0)\r\n    useEffect(() => {\r\n        setSkittleCount(count)\r\n    },[count])\r\n\r\n    const createSkittles = () => {\r\n        const skittles = [];\r\n        for(let i = 0; i < skittleCount; i++) {\r\n            skittles.push(<Skittle />)\r\n        }\r\n        return skittles;\r\n    }\r\n\r\n    return(\r\n        <div className=\"skittles_container\">\r\n            {createSkittles()}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport Message from './Message';\r\nimport SkittlesContainer from './SkittlesContainer';\r\n\r\nexport default () => {\r\n    const [count, setCount] = useState(0);\r\n\r\n    const skittleCount = event => {\r\n        console.log(`We making ${event.target.value} skittles!`);\r\n        setCount(event.target.value);\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Message skittleCount={skittleCount} />\r\n            <SkittlesContainer count={count}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport ColorContainer from './components/ColorContainer';\n\nfunction App() {\n  return (\n    <div className=\"app_background\">\n      <ColorContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}